# -*- coding: utf-8 -*-
"""multi-outputs model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pEATcEZL6ckQx0Oy-bRtF7lgmm6CPmqL
"""

# Importing the Boston Housing dataset
from sklearn.datasets import load_boston
import pandas as pd
import numpy as np

boston = load_boston()

df = pd.DataFrame(boston.data, columns = boston.feature_names)

#Adding target variable to dataframe
df['PRICE'] = boston.target

# Split the data into train and test with 80 train / 20 test
from sklearn.model_selection import train_test_split

train,test = train_test_split(df, test_size=0.2, random_state = 1)
train,val = train_test_split(train, test_size=0.2, random_state = 1)

def norm(x):
    return (x - train_stats['mean']) / train_stats['std']


def format_output(data):
    y1 = data.pop('PRICE')
    y1 = np.array(y1)
    y2 = data.pop('PTRATIO')
    y2 = np.array(y2)
    return y1, y2

train_stats = train.describe()
train_stats.pop('PRICE')
train_stats.pop('PTRATIO')

train_stats = train_stats.transpose()

train_Y = format_output(train)
test_Y = format_output(test)
val_Y = format_output(val)

# Normalize the training and test data
norm_train_X = np.array(norm(train))
norm_test_X = np.array(norm(test))
norm_val_X = np.array(norm(val))

# Commented out IPython magic to ensure Python compatibility.
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf
from matplotlib import pyplot as plt
import tensorflow_datasets as tfds

print("Tensorflow version " + tf.__version__)

def dense_layers():
  # Define model layers.
  input_layer = tf.keras.layers.Input(shape=(len(train .columns),))
  dense_layer = tf.keras.layers.Dense(units='512', activation='relu')(input_layer)
  first_dense = tf.keras.layers.Dense(units='128', activation='relu')(dense_layer)
  second_dense = tf.keras.layers.Dense(units='128',activation='relu')(first_dense)
  return input_layer, first_dense, second_dense


def price_regressor(first_dense):
  return tf.keras.layers.Dense(units=1, name='price_output')(first_dense)

def ratio_regressor(second_dense):
  return tf.keras.layers.Dense(units=1, name='ptratio_output')(second_dense)


def build_model():
  input_layer, first_dense, second_dense = dense_layers()
  
  y1_output = price_regressor(first_dense)
  y2_output = ratio_regressor(second_dense)

  return tf.keras.Model(inputs=input_layer, 
                               outputs=[y1_output, y2_output])


def define_and_compile_model():
  model = build_model()
  
  model.compile(optimizer='adam', 
              loss = {'price_output' : 'mse',
                      'ptratio_output' : 'mse'
                     },
              metrics = {'price_output' : 'mae',
                         'ptratio_output' : 'mae'
                        })
  return model

model = define_and_compile_model()

model.summary()

# Train the model for 100 epochs
history = model.fit(norm_train_X, train_Y,
   epochs=100, batch_size=10, validation_data=(norm_test_X, test_Y))

# Test the model and print loss and rmse for both outputs
loss,Y1_loss,Y2_loss,Y1_rmse,Y2_rmse=model.evaluate(x=norm_val_X, y=val_Y)
print()
print(f'loss: {loss}')
print(f'price_loss: {Y1_loss}')
print(f'ptratio_loss: {Y2_loss}')
print(f'price_rmse: {Y1_rmse}')
print(f'ptratio_rmse: {Y2_rmse}')

